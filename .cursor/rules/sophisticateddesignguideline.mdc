---
alwaysApply: false
---
# 토스 UX/UI 디자인 가이드북 *(React + Flask 적용 · 통합판)*

> 목표: 토스가 잘하는 “단순함 속의 일관성”을 **실무에서 바로 쓰도록** 정리. 디자인 원리·UX 라이팅·컴포넌트 패턴·FE/BE 연동·A11y·실전 팁까지 한 번에.

---

## 목차

1. [토스의 UX 철학과 원칙](#토스의-ux-철학과-원칙)
2. [디자인 언어(색·타이포·레이아웃·컴포넌트)](#디자인-언어색타이포레이아웃컴포넌트)
3. [핵심 사용자 플로우 & 마이크로 인터랙션](#핵심-사용자-플로우--마이크로-인터랙션)
4. [마이크로카피(UX 라이팅) 톤 & 매너](#마이크로카피ux-라이팅-톤--매너)
5. [접근성 & 심리적 배려 설계](#접근성--심리적-배려-설계)
6. [React 적용 패턴(컴포넌트/상태/모션)](#react-적용-패턴컴포넌트상태모션)
7. [Flask 백엔드 연동 시 UX 고려사항](#flask-백엔드-연동-시-ux-고려사항)
8. [시각 디자인 원리(균형·통일·대비·강조·비율·위계)](#시각-디자인-원리균형통일대비강조비율위계)
9. [UI/UX 실전 팁(선택 강조·모서리·터치·타이포·명확한 언어·가독성·추가정보)](#uiux-실전-팁선택-강조모서리터치타이포명확한-언어가독성추가정보)
10. [체크리스트(요약)](#체크리스트요약)

---

## 토스의 UX 철학과 원칙

* **One Page · One Thing**: 화면당 **하나의 결정/행동**만 남긴다.
* **과정 최소화**: 인증·법적 필수 외에는 제거. 인증은 **가능하면 늦게**.
* **쉬운 언어**: 전문용어 대신 일상어. 한 문장·한 메시지에 **한 가지 정보**.
* **익숙함 존중**: 완전한 새로움보다 **멘탈모델과 합치**.
* **보안×편의 동시 달성**: 겉은 간결, 뒤는 **이중/삼중 보안**.

---

## 디자인 언어(색·타이포·레이아웃·컴포넌트)

**색(예시 토큰)**
`--brand:#0064FF`, `--text:#1F2329`, `--muted:#707780`, `--border:#E5E7EB`, `--success:#10B981`, `--danger:#EF4444`
→ 포인트 컬러는 **절제**해 CTA/핵심 상태에만. 색+아이콘/라벨 **중복 표출**.

**타이포**
가독성 높은 산세리프, **숫자 가독성** 우선. 큰 제목·짧은 줄 길이.

**레이아웃/공간**
수직 흐름, **블록(Chunk) 단위** 정보, 섹션 간 **여백 차등**으로 계층 명확화.

**컴포넌트**
버튼/리스트/탭 등 **재사용 컴포넌트** 우선. 상태(hover/active/disabled/error)는 **시각·모션·텍스트**로 일관.

---

## 핵심 사용자 플로우 & 마이크로 인터랙션

* **온보딩/가입**: 화면당 입력 1개, **실시간 검증**은 조용히. 에러는 **해결책 동반**.
* **송금/결제**: 금액→수신자→확인의 **짧은 여정**, 프리페치/스켈레톤/낙관적 UI.
* **긴 로딩(심사 등)**: 스피너 대신 **진행 사실 시각화(단계/항목 등장)**.
* **마이크로 인터랙션**: 터치감(살짝 눌림)·상태 전환 **짧고 목적성 있는 모션**.

---

## 마이크로카피(UX 라이팅) 톤 & 매너

* **5 코어**: *Clear · Concise · Casual · Respectful · Warmly Emotional*
* **해요체/능동태/짧은 문장**: “전송했어요.” “다음으로 진행해요.”
* **부정 대신 해결책**: “불가” X → “이렇게 하면 돼요”.
* **행동 유도형 라벨**: YES/NO 대신 **“저장/버리기(Discard)”**.
* **용어 단순화·동사화**, 숫자/정책은 **맥락+대안** 함께.

---

## 접근성 & 심리적 배려 설계

* 클릭 가능한 건 **명확한 버튼 형태**(텍스트 링크 남용 X).
* **예시 데이터 오인 방지**(예시 표기, 개인정보 흉내내지 않기).
* **스크롤 힌트**·섹션 구분·예측 가능한 흐름.
* WCAG 대비·시스템 글꼴 크기 확대 대응.
* **에러 예방형 설계**(실수 가능 포인트를 구조적으로 제거).

---

## React 적용 패턴(컴포넌트/상태/모션)

**디자인 시스템 컴포넌트화**

```jsx
function PrimaryButton({label,onClick,disabled}) {
  return (
    <button className={`btn-primary ${disabled?'disabled':''}`} onClick={onClick} disabled={disabled}>
      {label}
    </button>
  );
}
/* CSS 요약
.btn-primary{background:#0064FF;color:#fff;padding:12px 16px;border-radius:8px;font-weight:600;font-size:16px}
.btn-primary.disabled{background:#D0D4D9;cursor:not-allowed}
*/
```

**원칙**

* **단일 책임·합성(Compound)**: 거대 페이지 → 작은 컴포넌트로 분해.
* **Headless**: 로직은 훅(`useXxx`), 뷰는 프레젠테이션 분리(디자인 교체 탄력성↑).
* **실시간 검증/친절 에러**

```jsx
const ok = /^\d{11}$/.test(val) ? "" : "전화번호 11자리를 정확히 입력해 주세요.";
```

* **모션**: 목적성 있는 짧은 전환(Framer Motion/transition).
* **품질**: Storybook 상태 카탈로그·RTL/Jest로 a11y 테스트.

---

## Flask 백엔드 연동 시 UX 고려사항

* **빠른 응답 & 비동기**: 캐시/프리페치/Celery·async. 프론트는 스켈레톤·점진 로딩.
* **원자적 API(One Thing per API)**: UX 단계와 엔드포인트 1:1 매핑.
* **검증 전략**: FE 관대, BE 엄격.
* **일관 에러 계약**

```json
{ "error_code":"LIMIT_EXCEEDED", "message":"한도 초과로 송금할 수 없어요. 남은 한도를 확인해 주세요." }
```

* **실시간 피드백**: WebSocket/SSE로 진행 이벤트 → 진행바/스텝으로 시각화.
* **모니터링**: 응답시간/실패율/이탈 구간 지표로 지속 개선.
* **신뢰 UX**: 민감 작업 2FA(자연스러운 모달), 처리 후 **거래ID/요약 즉시 표출**.

---

## 시각 디자인 원리(균형·통일·대비·강조·비율·위계)

### 1) 균형(Balance)

* **방사형 대칭**: 중심에서 원형/나선형 배치 → 강한 중심·에너지.
* **대칭**: 안정·예측 가능, 신뢰가 중요한 플로우.
* **비대칭**: 역동성·현대적 개성, 프로모션/추천.

**체크**: 무게중심 1개, CTA는 중심 근처, 비대칭 시 여백/정렬로 균형.

### 2) 통일감/조화(Unity/Harmony)

* **유사성**: 모양/색/크기/스타일의 통일 → 예측 가능 인터페이스.
* **근접**: 가까우면 같은 그룹으로 인지 → 라벨-입력은 수직거리 최소.
* **연속성**: 끊김 없는 시선 흐름 → 리스트→상세, 스텝, 브레드크럼.

### 3) 유사성과 대비(Similarity & Contrast)

* **명암**: 밝기 대비로 계층·깊이 형성.
* **선(Line)**: 구분·흐름·강조. 디바이더/타임라인/프로그레스.

> 대비 원칙: 색만 의존 X, **색+아이콘/라벨** 중복. 본문 4.5:1, 큰 텍스트 3:1 이상.

### 4) 우세/강조(Dominance/Emphasis)

* **하이라이트**: 형태/색/크기/스타일 변화로 시선 집중. 화면당 1~2개.
* **컬러**: 의미/우선순위 전달. 브랜드 컬러는 행동·핵심 상태에만.

### 5) 규모/비율(Scale/Proportion)

* **비율**: 4·8pt 그리드, 일정 타이포 스케일(예: 12–14–16–20–24–32).
* **크기**: 위계 전달(H1/H2/H3, KPI 확대).
* **구획**: 카드화·섹션 헤더·컬럼으로 관계/역할 명확화.

### 6) 시각적 위계(Hierarchy)

* **트리 구조**: 정보/기능의 계층을 직관화(IA·설정).
* **중첩 구조**: 포함/연결 관계를 시각화(단계 폼, 모달→시트→토스트).
* **시각적 무게**: 크기/굵기/선두께로 **중요도 즉시 전달**.

---

## UI/UX 실전 팁(선택 강조·모서리·터치·타이포·명확한 언어·가독성·추가정보)

### A. 선택한 항목은 **팝업(모달/시트)**으로 강조

* 리스트 내부의 단순 강조(톤만 변경)보다 **시트를 띄워 선택 상태를 눈에 띄게** 보여주면 인지·전환↑.
* 적용: 항목 탭 → 하단 시트에 핵심 정보/행동(편집·삭제·공유)을 **명시 버튼**으로.

### B. **1:2 모서리·여백 규칙**(Nested Card)

* 동일한 둥근 값으로 중첩하면 어색. **외곽 radius : 내곽 radius = 2 : 1** 권장.
* 공간도 **외곽 패딩 : 내부 간격 ≈ 2 : 1**(예: 24px : 12px)로 리듬 유지.

### C. **터치 대상** 최소 44×44 px

* 보이는 아이콘이 작아도 **히트 영역**은 44×44 이상(모바일).
* 아이콘/텍스트 주변에 **투명 패딩**을 얹어 실수 터치 감소.

### D. **표준 글꼴 크기 스케일**

* 웹 본문 **16px**에서 시작, 제목은 **+8px 단위**로 상승(H5→H1).
* iOS/Android 시스템 스케일을 존중(사용자 글꼴 확대 시 레이아웃 파손 금지).

### E. **명확한 언어**를 사용

* YES/NO는 모호. **행동 동사**로: `DISCARD / SAVE`, `취소 / 저장`.
* 대화상자 제목은 **결정행동을 재진술**: “변경 내용을 저장할까요?”

### F. **얇고 가벼운 글꼴** 남용 금지

* 보기엔 깔끔해도 가독성↓·A11y↓. 본문은 **Regular~Medium**, 작은 회색+Light 조합 지양.

### G. **추가 정보 제공**(미니멀리즘 과몰입 주의)

* 필요에 따라 **보조 정보**(파일 크기, 남은 시간, 진행률, 에러 원인)를 함께 노출해 **예측 가능성**을 높인다.
* 단, **우선정보와 시각적 위계**는 유지(보조는 톤 다운·작은 크기).

---

## 체크리스트(요약)

### 제품 설계

* [ ] 화면당 과업 1개, CTA 1개 중심 배치
* [ ] 단계·입력 최소화, 인증은 뒤로
* [ ] 익숙한 패턴·레이아웃 우선
* [ ] 보이는 건 단순, 내부는 안전

### 시각/카피

* [ ] 포인트 컬러 절제, 대비 준수(4.5:1)
* [ ] 본문 16px, 제목 +8px 스케일
* [ ] 해요체·능동태·짧은 문장
* [ ] 버튼은 **행동 라벨**, YES/NO 지양
* [ ] Light 폰트 남용 금지

### 인터랙션/접근성

* [ ] 터치 44×44, 포커스/키보드 내비 보장
* [ ] 스크롤 힌트·섹션 구분
* [ ] 선택 시 **시트/모달**로 명확히
* [ ] 1:2 **모서리·여백 리듬**

### React

* [ ] 디자인 토큰/컴포넌트화(변형은 props)
* [ ] Headless 훅 + 프레젠테이션 분리
* [ ] 실시간 검증 + 친절 에러
* [ ] Storybook·RTL/Jest로 a11y 테스트

### Flask

* [ ] 캐시/비동기/점진 로딩
* [ ] 원자적 API(단계=엔드포인트)
* [ ] `error_code + user_message` 계약
* [ ] SSE/WebSocket 진행 이벤트
* [ ] 로그/모니터링→지속 개선

---

