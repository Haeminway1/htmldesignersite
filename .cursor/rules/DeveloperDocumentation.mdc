---
alwaysApply: true
---
# 📚 개발 문서화 가이드라인

## 🎯 핵심 원칙

모든 개발 작업은 **체계적이고 정교한 문서화**를 동반해야 합니다. 문서는 미래의 개발자(또는 미래의 자신)가 즉시 이해하고 활용할 수 있도록 작성되어야 합니다.

## 📋 문서화 시점

다음 작업을 완료할 때마다 **즉시** 문서화를 진행하세요:

1. ✅ **새 기능 개발 완료** 시
2. ✅ **버그 수정 완료** 시  
3. ✅ **시스템 개선/리팩토링 완료** 시
4. ✅ **API 변경** 시
5. ✅ **아키텍처 변경** 시
6. ✅ **중요한 문제 해결** 시

> ⚠️ **중요**: 문서화는 선택이 아닌 **필수**입니다. 코드 커밋 전에 관련 문서를 반드시 업데이트하세요.

---

## 📁 문서 구조 및 역할

### 1. `dev_documentation.md` (통합 개발자 가이드)

**역할**: 프로젝트의 전체 아키텍처와 통합 정보를 담는 **마스터 문서**

**업데이트 대상**:
- 시스템 아키텍처 변경
- 새로운 주요 기능 추가 (섹션 추가)
- 기술 스택 변경
- API 엔드포인트 추가/변경
- 배포 프로세스 변경
- 프로젝트 구조 변경

**업데이트 방법**:
1. 해당 섹션을 찾아서 내용 추가/수정
2. 목차(TOC)가 있다면 업데이트
3. 새 섹션 추가 시 기존 구조와 일관성 유지
4. 관련 `documentation/` 폴더 문서로 링크 추가

**예시**:
```markdown
## 10. PDF 변환 시스템  ← 새 주요 기능

### 10.1 개요
...

### 10.2 변환 우선순위
...

상세 가이드: [documentation/pdf-conversion-system.md](./documentation/pdf-conversion-system.md)
```

---

### 2. `documentation/` 폴더 (세부 기술 문서)

**역할**: 특정 주제에 대한 **심층 분석 및 상세 가이드** 제공

#### 2-1. 기술 문서 (Technical Documentation)

**파일명 형식**: `주제-이름.md` (kebab-case)

**작성 대상**:
- 새로운 시스템/모듈 구현
- 복잡한 알고리즘 또는 로직
- 외부 API 통합
- 성능 최적화 작업
- 보안 구현

**예시**:
- `pdf-conversion-system.md` - PDF 변환 시스템 전체 가이드
- `ai-provider-integration.md` - AI 제공자 통합 방법
- `caching-strategy.md` - 캐싱 전략 및 구현
- `authentication-flow.md` - 인증 흐름 상세 설명

**필수 포함 내용**:
```markdown
# [제목]

> **카테고리**: 기술 문서  
> **최초 작성**: YYYY-MM-DD  
> **최근 업데이트**: YYYY-MM-DD  
> **작성자**: [이름/팀]

## 📌 개요
이 시스템/기능이 무엇인지 1-2 문단으로 설명

## 🎯 목적 및 배경
왜 이것이 필요했는지, 어떤 문제를 해결하는지

## 🏗️ 아키텍처/설계
시스템 구조, 주요 컴포넌트, 데이터 흐름

## 💻 구현 상세
핵심 코드, 알고리즘, 로직 설명

## 📊 성능 및 제약사항
성능 특성, 메모리 사용량, 알려진 제한사항

## 🔧 사용 방법
개발자가 이 기능을 사용하는 방법

## 🧪 테스트
테스트 방법 및 결과

## 🚨 트러블슈팅
자주 발생하는 문제와 해결 방법

## 📚 참고 자료
외부 문서, 라이브러리, 관련 링크

## 🔗 관련 문서
다른 관련 문서 링크
```

---

#### 2-2. 트러블슈팅 문서

**파일명 형식**: `문제-이름-fix.md`

**작성 대상**:
- 복잡하거나 반복적인 문제
- 환경별 설정 문제
- 디버깅 가이드

**예시**:
- `korean-font-fix.md` - 한글 폰트 깨짐 문제
- `memory-leak-debugging.md` - 메모리 누수 디버깅
- `cors-error-resolution.md` - CORS 오류 해결

**필수 포함 내용**:
```markdown
# [문제명] 해결 가이드

> **카테고리**: 트러블슈팅  
> **최초 작성**: YYYY-MM-DD

## 🚨 문제점
구체적인 증상, 에러 메시지

## 🔍 원인
문제가 발생하는 근본 원인 (가능하면 여러 원인 나열)

## ✅ 해결 방법
단계별 해결 방법 (우선순위대로)

## 🧪 확인 방법
해결되었는지 확인하는 테스트 방법

## 🎓 배운 점
이 문제를 통해 배운 것

## 🔗 관련 문서
관련된 다른 문서
```

---

#### 2-3. 개발 이력 (Development Log)

**파일명 형식**: `dev-log-YYYY-MM-DD.md` (날짜별 고정)

**작성 대상**:
- **모든 개발 작업일**에 작성 (필수)
- 특정 카테고리에 속하지 않는 일반 작업
- 여러 작업을 한 날의 종합 기록

**작성 시점**: 
- 작업 종료 시 (하루 마무리 전)
- 중요한 마일스톤 달성 시

**필수 포함 내용**:
```markdown
# 개발 이력 - YYYY년 MM월 DD일

> **작성일**: YYYY-MM-DD HH:MM  
> **작성자**: [이름]  
> **카테고리**: 개발 이력

## 📌 개요
오늘 작업한 내용을 3-5줄로 요약

## 🎯 목표
오늘 달성하려고 했던 목표 (체크박스 형식 권장)
- [ ] 목표 1
- [x] 목표 2 (완료)
- [ ] 목표 3 (진행 중)

## 🔍 발견된 문제
작업 중 발견한 문제, 버그, 이슈
- 구체적인 증상
- 발생 빈도
- 영향 범위

## 💡 해결 방법
문제를 어떻게 해결했는지
- 시도한 방법들
- 최종 선택한 해결책
- 선택 이유

## 🔧 변경된 파일
수정/추가/삭제한 파일 목록
```diff
+ backend/app.py - PDF 변환 로직 추가
~ frontend/script.js - 에러 핸들링 개선
- old_module.py - 사용하지 않아 삭제
```

## 📊 성능/개선 효과
변경 전후 비교 (숫자로 측정 가능하면 더 좋음)
- 변환 속도: 5초 → 2초 (60% 개선)
- 메모리 사용: 200MB → 150MB
- 정확도: 80% → 100%

## ✅ 테스트 결과
- 로컬 테스트: ✅ 통과
- 배포 테스트: ⏳ 대기 중
- 성능 테스트: ✅ 통과

## 🎓 배운 점
오늘 작업을 통해 배운 기술, 개념, 노하우

## 🚧 알려진 제한사항
현재 남아있는 문제나 한계

## 📝 향후 개선 사항
다음에 개선할 점, TODO 리스트

## 📚 참고 자료
참고한 문서, Stack Overflow, GitHub 이슈 등

## 🔗 관련 문서
이 작업과 관련된 다른 문서 (기술 문서 등)
```

---

## ✍️ 문서 작성 품질 기준

### 필수 요구사항

1. **명확성** ✅
   - 전문 용어 사용 시 첫 등장에서 설명
   - 애매한 표현 지양 ("아마도", "~인 것 같다" 등)
   - 구체적인 수치, 파일명, 함수명 사용

2. **완전성** ✅
   - 독자가 추가 자료 없이 이해 가능해야 함
   - 모든 단계 빠짐없이 기록
   - 예외 상황도 포함

3. **구조화** ✅
   - 계층적 헤딩 사용 (H1 → H2 → H3)
   - 리스트, 표, 코드 블록으로 가독성 향상
   - 너무 긴 문단은 분할

4. **코드 예시** ✅
   - 실제 작동하는 코드 제공
   - 주석으로 설명 추가
   - 파일 경로 명시

5. **시각 자료** ✅ (선택)
   - 다이어그램, 플로우차트 (Mermaid 사용)
   - 스크린샷 (필요 시)
   - 성능 그래프

6. **상호 참조** ✅
   - 관련 문서 링크
   - dev_documentation.md와 연결
   - 양방향 링크 유지

---

## 🎨 작성 스타일 가이드

### 1. 헤더 아이콘 사용
문서를 시각적으로 구분하기 위해 이모지 사용 (일관성 유지):

```markdown
## 📌 개요
## 🎯 목적
## 🔍 문제점
## 💡 해결 방법
## 🔧 구현
## 📊 결과
## ✅ 체크리스트
## 🚨 경고
## 🎓 배운 점
## 📚 참고 자료
## 🔗 관련 문서
```

### 2. 코드 블록
언어 명시 및 파일 경로 포함:

```markdown
**파일**: `backend/app.py`
```python
def example_function():
    """설명"""
    pass
```
```

### 3. 강조 표시
- **굵게**: 중요한 개념, 파일명
- `코드`: 함수명, 변수명, 명령어
- > 인용: 중요한 노트, 경고

### 4. 체크리스트
작업 진행 상황 표시:

```markdown
- [x] 완료된 항목
- [ ] 진행 중인 항목
- [ ] 예정된 항목
```

---

## 📋 문서화 체크리스트

작업 완료 후 다음을 확인하세요:

### 개발 작업 완료 시
- [ ] 코드 변경사항 커밋 전에 문서 작성 완료
- [ ] `dev_documentation.md`에 변경사항 반영 (해당 시)
- [ ] `documentation/` 폴더에 세부 문서 작성 (필요 시)
- [ ] 오늘 날짜의 `dev-log-YYYY-MM-DD.md` 작성/업데이트
- [ ] 모든 코드 예시가 실제로 작동하는지 확인
- [ ] 관련 문서 간 링크 연결
- [ ] 이전 문서와 모순되는 내용 없는지 확인
- [ ] 오타 및 문법 검토

### 문서 품질 검증
- [ ] 제목과 메타데이터 (날짜, 카테고리) 포함
- [ ] 개요/목적 섹션 존재
- [ ] 코드 예시에 파일 경로 명시
- [ ] 최소 1개 이상의 관련 문서 링크
- [ ] 트러블슈팅/알려진 제한사항 기록 (해당 시)

### 문서 통합성 검증
- [ ] `dev_documentation.md` 목차 업데이트
- [ ] `documentation/README.md` 문서 목록 업데이트 (필요 시)
- [ ] `README.md`에 중요 변경사항 반영 (필요 시)

---

## 🔄 문서 업데이트 워크플로우

### 1. 작업 시작 시
```markdown
1. 관련 기존 문서 읽기
2. 변경 계획을 문서에 메모 (TODO 추가)
```

### 2. 작업 중
```markdown
1. 중요한 발견사항 즉시 메모
2. 막힌 부분과 해결 방법 기록
3. 코드 주석에 문서화할 내용 표시
```

### 3. 작업 완료 후
```markdown
1. dev-log-YYYY-MM-DD.md 작성/업데이트
2. 기술 문서 작성 (새 시스템/기능인 경우)
3. dev_documentation.md 업데이트 (주요 변경 시)
4. 관련 문서 간 링크 연결
5. 코드 커밋과 함께 문서 커밋
```

---

## 📖 문서 예시

### 좋은 예시 ✅

```markdown
# PDF 변환 시스템

> **카테고리**: 기술 문서  
> **최초 작성**: 2025-10-10  
> **최근 업데이트**: 2025-10-10

## 📌 개요

HTML을 PDF로 변환하는 시스템을 Chrome 브라우저 엔진 기반으로 
구현했습니다. 이전 WeasyPrint 방식 대비 정확도가 95%에서 
100%로 향상되었습니다.

## 🎯 목적 및 배경

**문제**: WeasyPrint는 Flexbox 레이아웃을 부정확하게 렌더링하여 
박스 크기가 HTML과 최대 20% 차이 발생

**해결**: Chrome의 실제 인쇄 엔진(Page.printToPDF)을 사용하여 
브라우저와 100% 동일한 결과 생성

## 🏗️ 아키텍처

```python
# backend/app.py
def html_to_pdf(html_content: str) -> str:
    """Chrome CDP를 사용한 PDF 변환"""
    # 1. 임시 HTML 파일 생성
    # 2. Selenium으로 Chrome 실행
    # 3. Page.printToPDF 호출
    # 4. Base64 디코딩 및 파일 저장
```

## 📊 성능 비교

| 방식 | 속도 | 정확도 | 메모리 |
|------|------|--------|--------|
| Chrome | 2-3초 | ⭐⭐⭐⭐⭐ | 150MB |
| WeasyPrint | 0.5초 | ⭐⭐⭐ | 50MB |

## 🔗 관련 문서
- [한글 폰트 문제 해결](./korean-font-fix.md)
- [개발 이력](./dev-log-2025-10-10.md)
```

### 나쁜 예시 ❌

```markdown
# PDF 변환

Chrome으로 PDF를 만듭니다.

코드:
```python
def convert():
    # PDF 생성
    pass
```

빠르고 정확합니다.
```

**문제점**:
- 메타데이터 없음
- 배경 설명 부족
- 코드가 불완전 (실제 작동하지 않음)
- 성능 데이터 없음
- 관련 문서 링크 없음

---

## 🎯 최종 목표

**모든 문서는 다음 질문에 답할 수 있어야 합니다**:

1. **What** (무엇을): 이 시스템/기능이 무엇인가?
2. **Why** (왜): 왜 필요했는가? 어떤 문제를 해결하는가?
3. **How** (어떻게): 어떻게 구현되었는가?
4. **When** (언제): 언제 만들어졌고, 언제 업데이트되었는가?
5. **Who** (누가): 누가 사용하는가? 누가 관리하는가?

이 원칙을 지키면 6개월 후에도, 다른 개발자가 봐도 **즉시 이해 가능한** 문서가 됩니다.

---

## 💡 팁

1. **작성하기 전에 읽기**: 비슷한 기존 문서의 스타일을 따라라
2. **미래의 자신을 위해**: 6개월 후 내가 봐도 이해할 수 있게
3. **코드보다 문서가 먼저**: 설계를 문서로 먼저 작성하면 코드가 명확해짐
4. **완벽하지 않아도 좋다**: 80% 문서가 0% 문서보다 낫다
5. **지속적 개선**: 문서는 한 번에 완성되지 않는다. 계속 업데이트하라

---

**Remember**: 좋은 코드는 동작하는 코드이지만, **훌륭한 코드는 문서화된 코드**입니다. 📚✨